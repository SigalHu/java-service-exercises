<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<!--日志级别：ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF，如果设置为WARN，则低于WARN的信息都不会输出-->
<log4j:configuration>

    <!-- 将日志信息输出到控制台 -->
    <appender name="consoleAppender" class="org.apache.log4j.ConsoleAppender">
        <!-- 设置日志输出的样式 -->
        <layout class="org.apache.log4j.PatternLayout">
            <!--
                 %n - 换行
                 %m - 日志内容
                 %p - 日志级别(FATAL， ERROR，WARN， INFO，DEBUG or custom)
                 %r - 程序启动到现在的毫秒数
                 %t - 当前线程名
                 %d - 日期和时间, 一般使用格式 %d{yyyy-MM-dd HH:mm:ss.SSS}
                 %l - 输出日志事件的发生位置， 同 %F%L%C%M
                 %F - java 源文件名
                 %L - java 源码行数
                 %C - java 类名，%C{1} 输出最后一个元素
                 %M - java 方法名
            -->
            <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%p] -%l -%m%n"/>
        </layout>

        <!--&lt;!&ndash; 过滤器设置输出的级别 &ndash;&gt;-->
        <!--<filter class="org.apache.log4j.varia.LevelRangeFilter">-->
            <!--&lt;!&ndash; 设置日志输出的最小级别 &ndash;&gt;-->
            <!--<param name="levelMin" value="WARN"/>-->
            <!--&lt;!&ndash; 设置日志输出的最大级别 &ndash;&gt;-->
            <!--<param name="levelMax" value="ERROR"/>-->
            <!--&lt;!&ndash; 设置日志输出的xxx，默认是false &ndash;&gt;-->
            <!--<param name="AcceptOnMatch" value="true"/>-->
        <!--</filter>-->
    </appender>

    <!-- 输出日志到文件 -->
    <appender name="infoAppender" class="org.apache.log4j.FileAppender">
        <!-- 输出文件全路径名-->
        <param name="File" value="${log4j.dir}/info.log"/>
        <!--是否在已存在的文件追加写，默认为true，若为false则每次启动都会删除并重新新建文件-->
        <param name="Append" value="false"/>
        <param name="Threshold" value="INFO"/>
        <!--是否启用缓存，默认false-->
        <param name="BufferedIO" value="false"/>
        <!--缓存大小，依赖上一个参数(bufferedIO), 默认缓存大小8K  -->
        <param name="BufferSize" value="512"/>
        <!-- 设置日志输出的样式 -->
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%p] -%l -%m%n"/>
        </layout>
    </appender>

    <!-- 将日志信息输出到文件，但是当文件的大小达到某个阈值的时候，自动备份日志文件 -->
    <appender name="warnAppender" class="org.apache.log4j.RollingFileAppender">
        <param name="Encoding" value="UTF-8"/>
        <!-- 设置日志信息输出文件全路径名 -->
        <param name="File" value="${log4j.dir}/warn.log"/>
        <!--是否在已存在的文件追加写：默认时true，若为false则每次启动都会删除并重新新建文件-->
        <param name="Append" value="true"/>
        <!-- 设置保存备份回滚日志的最大个数，默认值为1  -->
        <param name="MaxBackupIndex" value="10"/>
        <!-- 设置当日志文件达到此阈值的时候自动回滚，单位可以是KB，MB，GB，默认单位是KB，默认值为10MB -->
        <param name="MaxFileSize" value="10KB"/>
        <!-- 设置日志输出的样式 -->
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%p] -%l -%m%n"/>
        </layout>
    </appender>

    <!-- 将日志信息输出到文件，可定期备份日志文件，默认一天一个文件，也可设置为每分钟一个、每小时一个 -->
    <appender name="errorAppender" class="org.apache.log4j.DailyRollingFileAppender">
        <!-- 设置日志信息输出文件全路径名 -->
        <param name="File" value="${log4j.dir}/error.log"/>
        <!-- 设置日志备份频率为每分钟回滚一次，即产生一个新的日志文件 -->
        <param name="DatePattern" value="'.'yyyy-MM-dd-HH-mm'.log'"/>
        <!-- 设置日志输出的样式 -->
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%p] -%l -%m%n"/>
        </layout>
    </appender>


    <!--
         1：当additivity="false"时，root中的配置就失灵了，不遵循缺省的继承机制
         2：logger中的name非常重要，它代表记录器的包的形式，有一定的包含关系，试验表明
           2-1：当定义的logger的name同名时，只有最后的那一个才能正确的打印日志
           2-2：当对应的logger含有包含关系时，比如：name=test.log4j.test8 和 name=test.log4j.test8.UseLog4j，则2-1的情况是一样的
           2-3：logger的name表示所有的包含在此名的所有记录器都遵循同样的配置，name的值中的包含关系是指记录器的名称哟！注意啦！
         3：logger中定义的level和appender中的filter定义的level的区间取交集
         4：如果appender中的filter定义的 levelMin > levelMax ，则打印不出日志信息
     -->

    <!-- 指定logger的设置，additivity指示是否遵循缺省的继承机制-->
    <logger name="infoLogger" additivity="false">
        <level value="INFO"/>
        <appender-ref ref="infoAppender"/>
    </logger>

    <!--指定logger的设置，additivity指示是否遵循缺省的继承机制 -->
    <logger name="warnLogger" additivity="false">
        <level value="WARN"/>
        <appender-ref ref="warnAppender"/>
    </logger>

    <logger name="errorLogger">
        <level value="ERROR"/>
        <appender-ref ref="errorAppender"/>
    </logger>

    <logger name="com.sigalhu">
        <level value="ERROR"/>
        <appender-ref ref="errorAppender"/>
    </logger>

    <!-- 根logger的设置，若代码中未找到指定的logger，则会根据继承机制，使用根logger-->
    <root>
        <level value="INFO"/>
        <appender-ref ref="consoleAppender"/>
    </root>
</log4j:configuration>